import json
import asyncio
import math
import re
import logging
from typing import Optional, Dict, Tuple, Any

import aiohttp
from bs4 import BeautifulSoup
from tabulate import tabulate

from src.settings import setting

logging.basicConfig(level=logging.INFO)


class HttpClient:
    """–ö–ª–∞—Å—Å –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤."""

    headers = {
        "User-Agent": ("Mozilla/5.0 (Windows NT 10.0; Win64; x64) "
                       "AppleWebKit/537.36 (KHTML, like Gecko) "
                       "Chrome/110.0.0.0 Safari/537.36")
    }

    @staticmethod
    async def fetch(url: str, method: str = "GET", data: Optional[Dict] = None) -> Optional[str]:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç HTTP-–∑–∞–ø—Ä–æ—Å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç."""
        try:
            async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=120),
                                             headers=HttpClient.headers) as session:
                async with (session.get(url, ssl=False) if method == "GET" else session.post(url, data=data,
                                                                                             ssl=False)) as response:
                    response.raise_for_status()
                    return await response.text()
        except aiohttp.ClientError as e:
            logging.error(f"HTTP error: {e}")
            return None


class VoteCounter:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≥–æ–ª–æ—Å–æ–≤ –ø–æ post_id."""

    @staticmethod
    async def get_count(post_id: str) -> tuple[Any, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ post_id."""
        data = {"action": "load_results", "postID": post_id}
        response = await HttpClient.fetch(setting.URL_VOTE, method="POST", data=data)
        try:
            votes = json.loads(response)['voteCount']
            rating = json.loads(response)['avgRating']
        except (KeyError, TypeError, json.JSONDecodeError):
            return "N/A", "N/A"
        return votes, rating

    @staticmethod
    def calculate_votes_for_target_difference(rating_first, votes_first, rating_second, votes_second,
                                              target_diff=setting.COMPARE_RATING) -> int:
        """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç, —Å–∫–æ–ª—å–∫–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å, —á—Ç–æ–±—ã –¥–æ–±–∏—Ç—å—Å—è —Ä–∞–∑–Ω–∏—Ü—ã –≤ —Ä–µ–π—Ç–∏–Ω–≥–∞—Ö
    –º–µ–∂–¥—É –ø–µ—Ä–≤–æ–π –∏ –≤—Ç–æ—Ä–æ–π –∫–æ–º–ø–∞–Ω–∏–µ–π —Ä–∞–≤–Ω–æ–π target_diff. –ü—Ä–∏ —ç—Ç–æ–º:
      - –ö –ø–µ—Ä–≤–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ –ø—Ä–∏–±–∞–≤–ª—è—é—Ç—Å—è –≥–æ–ª–æ—Å–∞ —Å –æ—Ü–µ–Ω–∫–æ–π 5.
      - –ö –≤—Ç–æ—Ä–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ –ø—Ä–∏–±–∞–≤–ª—è—é—Ç—Å—è –≥–æ–ª–æ—Å–∞ —Å –æ—Ü–µ–Ω–∫–æ–π 1.

    –ù–æ–≤—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –∫–æ–º–ø–∞–Ω–∏–π –≤—ã—á–∏—Å–ª—è–µ—Ç—Å—è –∫–∞–∫:
      R1 = (S1 + 5*x) / (votes_first + x)
      R2 = (S2 + 1*x) / (votes_second + x)
    –≥–¥–µ:
      S1 = rating_first * votes_first
      S2 = rating_second * votes_second
    –¢—Ä–µ–±—É–µ—Ç—Å—è, —á—Ç–æ–±—ã R1 - R2 = target_diff.

    –ü—É—Ç—ë–º –ø—Ä–∏–≤–µ–¥–µ–Ω–∏—è —É—Ä–∞–≤–Ω–µ–Ω–∏—è –∫ –≤–∏–¥—É A*x¬≤ + B*x + C = 0 –ø–æ–ª—É—á–∞–µ–º:
      A = (4 - target_diff)
      B = (S1 - S2 + 5*votes_second - votes_first) - target_diff * (votes_first + votes_second)
      C = S1 * votes_second - S2 * votes_first - target_diff * votes_first * votes_second

    –§—É–Ω–∫—Ü–∏—è —Ä–µ—à–∞–µ—Ç —ç—Ç–æ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ, –≤—ã–±–∏—Ä–∞–µ—Ç –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ—Ä–µ–Ω—å –∏ –æ–∫—Ä—É–≥–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ
    —Ü–µ–ª–æ–≥–æ —á–∏—Å–ª–∞ –≤–≤–µ—Ä—Ö (—Ç–∞–∫ –∫–∞–∫ —á–∏—Å–ª–æ –≥–æ–ª–æ—Å–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª—ã–º).

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
      rating_first (float): —Ç–µ–∫—É—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –ø–µ—Ä–≤–æ–π –∫–æ–º–ø–∞–Ω–∏–∏.
      votes_first (int): —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤ –ø–µ—Ä–≤–æ–π –∫–æ–º–ø–∞–Ω–∏–∏.
      rating_second (float): —Ç–µ–∫—É—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –≤—Ç–æ—Ä–æ–π –∫–æ–º–ø–∞–Ω–∏–∏.
      votes_second (int): —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤ –≤—Ç–æ—Ä–æ–π –∫–æ–º–ø–∞–Ω–∏–∏.
      target_diff (float): —Ç—Ä–µ–±—É–µ–º–∞—è —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É —Ä–µ–π—Ç–∏–Ω–≥–∞–º–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0.1).

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
      int: –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫ –æ–±–µ–∏–º –∫–æ–º–ø–∞–Ω–∏—è–º
           (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –¥–ª—è –ø–µ—Ä–≤–æ–π —Å –æ—Ü–µ–Ω–∫–æ–π 5 –∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –¥–ª—è –≤—Ç–æ—Ä–æ–π —Å –æ—Ü–µ–Ω–∫–æ–π 1),
           —á—Ç–æ–±—ã —Ä–∞–∑–Ω–∏—Ü–∞ –≤ —Ä–µ–π—Ç–∏–Ω–≥–∞—Ö —Å—Ç–∞–ª–∞ —Ä–∞–≤–Ω–æ–π target_diff.
    """
        # –í—ã—á–∏—Å–ª—è–µ–º —Å—É–º–º–∞—Ä–Ω—ã–µ –±–∞–ª–ª—ã –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–º–ø–∞–Ω–∏–∏

        S1 = rating_first * votes_first
        S2 = rating_second * votes_second

        # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–≥–æ —É—Ä–∞–≤–Ω–µ–Ω–∏—è A*x¬≤ + B*x + C = 0
        A = 4 - target_diff
        B = (S1 - S2 + 5 * votes_second - votes_first) - target_diff * (votes_first + votes_second)
        C = S1 * votes_second - S2 * votes_first - target_diff * votes_first * votes_second

        discriminant = B ** 2 - 4 * A * C
        if discriminant < 0:
            raise ValueError("–î–∏—Å–∫—Ä–∏–º–∏–Ω–∞–Ω—Ç –º–µ–Ω—å—à–µ –Ω—É–ª—è. –ù–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –∑–∞–¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.")

        # –í—ã–±–∏—Ä–∞–µ–º –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ—Ä–µ–Ω—å —É—Ä–∞–≤–Ω–µ–Ω–∏—è
        x = (-B + math.sqrt(discriminant)) / (2 * A)
        return math.ceil(x)


class HtmlParser:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ HTML –∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å –≥–æ–ª–æ—Å–∞–º–∏."""

    @staticmethod
    def compare_first_and_second_place_ratings(first_place_rating: float, second_place_rating: float) -> bool:
        return round(first_place_rating - second_place_rating, 4) >= setting.COMPARE_RATING

    @staticmethod
    async def parse_top_developers() -> str | None:
        """
        –ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ç–æ–ø–æ–º –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤ –∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞,
        –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞ —Å—Å—ã–ª–∫–∞, –∏–∑–≤–ª–µ–∫–∞–µ—Ç post_id –∏ –ø–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å —Ç–∞–±–ª–∏—Ü–µ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.
        """
        html = await HttpClient.fetch(setting.URL_TOP)
        if not html:
            return "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"

        soup = BeautifulSoup(html, "html.parser")
        table = soup.find("div", class_="top-zastroyshikov-table")
        if not table:
            return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

        rows = table.find_all("div", id="rating-table-item")[:5]
        data = []
        first_place = 0
        first_voites = 0
        for index, row in enumerate(rows, 1):
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Å—Ç–æ
            place_div = row.find("div", class_="top-zastroyshikov-1")
            place_text = place_div.get_text(strip=True) if place_div else "?"

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏, –µ—Å–ª–∏ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∞ ‚Äì –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
            name_div = row.find("div", class_="top-zastroyshikov-2")
            a_tag = name_div.find("a") if name_div else None
            if a_tag:
                name = a_tag.get_text(strip=True)
                vote_page_url = a_tag.get("href", "")
                post_id = await HtmlParser.extract_post_id(vote_page_url)
                votes, rating = await VoteCounter.get_count(post_id) if post_id else "N/A"
                if index == 2 and HtmlParser.compare_first_and_second_place_ratings(first_place, float(rating)):
                    return f"–†–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É 1 –∏ 2 –º–µ—Å—Ç–æ–º –Ω–µ –±–æ–ª–µ–µ {setting.COMPARE_RATING} ‚≠ê"


            else:
                name = name_div.get_text(strip=True) if name_div else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                rating = "N/A"
                votes = "N/A"

            first_place = rating
            first_voites = votes
            data.append(f"üèÜ {place_text}. *{name}* ‚Äî {rating} ‚≠ê, –ì–æ–ª–æ—Å–∞: {votes}")

        result_table = "\n".join(data)
        result_table += f"\n\nüëâ [–ü–æ–¥—Ä–æ–±–Ω–µ–µ]({setting.URL_TOP})"
        return result_table

    @staticmethod
    async def extract_post_id(url: str) -> Optional[str]:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç post_id –∏–∑ —Ç–µ–≥–∞ <script> –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É URL.
        –ò—â–µ—Ç —à–∞–±–ª–æ–Ω "post_id":<—Ü–∏—Ñ—Ä—ã>.
        """
        html = await HttpClient.fetch(url)
        if not html:
            return None

        soup = BeautifulSoup(html, "html.parser")
        script_tag = soup.find("script", string=re.compile(r'"post_id":(\d+)'))
        if script_tag and (match := re.search(r'"post_id":(\d+)', script_tag.string)):
            return match[1]
        return None


# asyncio.run(HtmlParser.parse_top_developers())
